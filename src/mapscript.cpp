#include "mapscript.h"

QString MapScript::Function::build()
{
    QString concat = "function " + name + "()";
    for(QString line : lines)
        concat.append("\n" + line);
    concat.append("\nend");
    return concat;
}

MapScript::MapScript()
{
    functions = QMap<QString,Function>();
    variables = QMap<QString,Variable>();

    functions.insert("map:on_started", Function("map:on_started"));
    functions.insert("map:on_update", Function("map:on_update"));

    variables.insert("map", Variable("map", "..."));
    variables.insert("game", Variable("game", "map:get_game()"));
}

MapScript::~MapScript() { }

MapScript::Function* MapScript::getFunction(QString name)
{
    auto iter = functions.find(name);
    if(iter != functions.end())
        return &iter.value();
    else
        return nullptr;
}

void MapScript::addSwitch(SwitchEntity switchEntity)
{
    // Create on active function for this script
    Function onActivate = Function(switchEntity.getName() + ":on_activated");

    // Create on_active function contents
    onActivate.addLine("game:set_value(\"" + switchEntity.getName() + "Active\",true)\n");

    // Add to functions
    functions.insert(onActivate.getName(), onActivate);

    // Create and add switch variable to map
    Variable switchVar = Variable(switchEntity.getName(), "map:get_entity(\"" + switchEntity.getName() + "\")");

    // Add the switch variable to the script
    variables.insert(switchVar.getName(), switchVar);
}

void MapScript::addDoor(Door door, QList<Key*> keys)
{
    // Construct the neccesary script
    QString ifStatement;
    for(int i = 0; i < keys.size(); i++)
    {
        ifStatement += "if(game:get_value(\"" + keys[i]->getName() + "Active\") == true";
        if(i != keys.size()-1)
            ifStatement += "and";
        else
            ifStatement += ") then";
    }

    QString result = "map:open_doors(\"" + door.getName() + "\")";
    QString end = "end";

    // Add the script to all neccesary functions

    // The on_started function is used to check, when the map opens, if the required keys have been activated
    Function& onStarted = functions.find("map:on_started").value();

    // The update function checks on each frame if the switch has been activated (this is neccessary for maps on which the keys and gates are
    // both located)
    Function& onUpdate = functions.find("map:on_update").value();

    onStarted.addLine(ifStatement);
    onStarted.addLine(result);
    onStarted.addLine(end);

    onUpdate.addLine(ifStatement);
    onUpdate.addLine(result);
    onUpdate.addLine(end);
}

void MapScript::writeToFile(QFile& file)
{
    file.open(QIODevice::WriteOnly);

    if(!file.isOpen())
        return;

    QTextStream out(&file);

    out << "-- The following script has been generated by the ProcLevelDesigner.\n";

    // Ensure MAP and GAME variables always printed first, many other variables rely on their defitinion and assignment
    out << variables.find("map").value().build() << "\n";
    out << variables.find("game").value().build() << "\n";

    // Write all variables
    for(QMap<QString,Variable>::iterator iter = variables.begin(); iter != variables.end(); iter++)
        out << iter.value().build() << "\n";

    // Write all functions
    for(QMap<QString,Function>::iterator iter = functions.begin(); iter != functions.end(); iter++)
        out << iter.value().build() << "\n";

    out << "-- End of generated script.\n";

    out.flush();
    file.flush();
    file.close();
}
